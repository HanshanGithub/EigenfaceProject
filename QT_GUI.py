# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'QT_GUI'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


# -*- coding:utf-8 -*-
# -*- coding:utf-8 -*-
import os

import cv2
import numpy as np
import scipy
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QGraphicsPixmapItem, QGraphicsScene, QAction
from matplotlib import pyplot as plt

import loadData
import mark
import my_gui
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import pcatest


class faceWindow(QtWidgets.QMainWindow):
    mean1 = []
    V_img_finall = []
    iamgeMatrix = [ ]
    mean_img = []
    myImg = []
    lable = 0
    count = 0
    value = []
    times = 1

    def __init__(self):
        QtWidgets.QMainWindow.__init__(self)
        self.ui = my_gui.Ui_MainWindow()
        self.ui.setupUi(self)
        # 给button 的 点击动作绑定一个事件处理函数
        # self.ui.print.clicked.connect(self.showpic)
        self.ui.load_data.clicked.connect(self.showABData)
        self.ui.pic.clicked.connect(self.pca)
        self.ui.mean_img.clicked.connect(self.meanImg)
        self.ui.mean.clicked.connect(self.showMean)
        self.ui.feature.clicked.connect(self.feature)
        self.ui.value.clicked.connect(self.showValue)
        # self.load_data()

    def showValue(self):
        try:
            if self.V_img_finall == []:
                self.ui.text.append("step{0}:value is empty!\n   Please run PCA\n".format(self.times))
                # self.ui.text.append("   error")
            else:
                self.ui.text.append("step{0}:show value".format(self.times))
                print(self.V_img_finall)
            self.times += 1

        except:
            self.ui.text.append("   error! this time no feature value")

    def feature(self):
        # try:
            self.ui.text.append("step{0}:show face feature".format(self.times))
            self.times += 1
            if os.path.exists('feature.jpg')==False:
                self.ui.text.append("   error! Please run PCA\n")
                return
            frame = QImage('feature.jpg')
            pix = QPixmap.fromImage(frame)
            item = QGraphicsPixmapItem(pix)  # fitInView(item)
            scene = QGraphicsScene()
            scene.addItem(item)
            self.ui.gui.setScene(scene)
            self.ui.gui.fitInView(item)
            self.ui.gui.show()
        # except:
        #     self.ui.text.append("   error! this time no feature")
        # else:



    def pca(self):
        self.ui.text.append("step{0}:Run PCA".format(self.times))
        self.times += 1
        try:
            TrainsourcePath = r'E:\Python\faceData\Pro\TrainFaceData1'
            # TestsourthPath = r'E:\Python\faceData\Pro\TestFaceData'  #未派上用场,'.tiff'
            self.mean1,self.V_img_finall,self.iamgeMatrix, self.mean_img,self.lable,self.count = \
                pcatest.PcaTest(TrainsourcePath,  '.jpg', '.JPG', '.png', '.PNG','.tiff')

            pcatest.draw(self.iamgeMatrix, 'mean-img.jpg')
            pcatest.draw(self.V_img_finall, 'feature.jpg')
            np.savetxt('V_img_finall.csv', self.V_img_finall, delimiter=',')
            self.ui.text.append("   PCA is over")

        except:
            self.ui.text.append("   Error, 文件路径可能错误，请检查\n")

    def meanImg(self):
        try:
            self.ui.text.append("step{0}:show mean - image".format(self.times))
            self.times += 1
            if os.path.exists('mean-img.jpg')==False:
                self.ui.text.append("   error! Please run PCA\n")
                return
            frame = QImage('mean-img.jpg')
            pix = QPixmap.fromImage(frame)
            item = QGraphicsPixmapItem(pix) # fitInView(item)
            scene = QGraphicsScene()
            scene.addItem(item)
            self.ui.gui.setScene(scene)
            self.ui.gui.fitInView(item)
            self.ui.gui.show()
        except:
            self.ui.text.append("   error! this time no iamgeMatrix")

    def showMean(self):
        try:
            self.ui.text.append("step{0}:show meanimage".format(self.times))
            self.times += 1
            means = np.reshape(self.mean_img, (200, 200))
            plt.figure()
            plt.title('mean image')
            plt.axis('off')
            plt.imshow(means,cmap='gray')
            plt.savefig('meanIMG.jpg')
            frame = QImage('meanIMG.jpg')
            pix = QPixmap.fromImage(frame)
            item = QGraphicsPixmapItem(pix)
            scene = QGraphicsScene()
            scene.addItem(item)
            self.ui.gui.setScene(scene)
            self.ui.gui.fitInView(item)
            self.ui.gui.show()
        except:
            self.ui.text.append("   error! Please run PCA\n")

    def showpic(self):
        self.ui.text.append("step{0}:show pic".format(self.times))
        self.times += 1
        try:
            frame = QImage(r"E:\Python\faceData\Pro\TestSourceImg\i000qa-fn.jpg")
            frame = frame.scaled(391,291)
            pix = QPixmap.fromImage(frame)
            item = QGraphicsPixmapItem(pix)  # 创建像素图元
            scene = QGraphicsScene()  # 创建场景
            scene.addItem(item)
            self.ui.gui.setScene(scene)
            self.ui.gui.fitInView(item)
            self.ui.gui.show()
        except:
            self.ui.text.append("   error! can't show picture")

    def test2(self):
        # 此处编写具体的业务逻辑
        print("test")
        self.ui.text.append("step{0}:print".format(self.times))
        self.times += 1

    def showABData(self):
        self.ui.text.append("step{0}:Load data".format(self.times))
        self.times += 1
        # mark.saveABdata()
        frame = QImage('./pic/ABdata.png')
        pix = QPixmap.fromImage(frame)
        item = QGraphicsPixmapItem(pix)  # fitInView(item)
        scene = QGraphicsScene()
        scene.addItem(item)
        self.ui.gui.setScene(scene)
        self.ui.gui.fitInView(item)
        self.ui.gui.show()

    def load_data(self):
        count, mats, lable = pcatest.LoadData(r'E:\Python\faceData\Pro\TrainFaceData','.jpg')
        # self.ui.text.append("step{0}:load_data".format(self.times))
        # self.times += 1
        try:
            imageMatrix = np.transpose(mats)
            imageMatrix = np.mat(imageMatrix)
            pcatest.draw(imageMatrix,'Bdata.png')
        except:
            self.ui.text.append("   ")


def removeJPG():
    file_name = sys.path[0]
    for root,dirs,files in os.walk(file_name):
        for name in files:
            if name.endswith(".jpg"):
                os.remove(os.path.join(root,name))
                # print("delete file:",os.path.join(root,name))

if __name__ == '__main__':
    removeJPG()
    app = QtWidgets.QApplication(sys.argv)
    window = faceWindow()
    window.show()
    sys.exit(app.exec_())

